---
layout: post
title: "Iterar dos o m√°s iterables con zip()"
date: 2024-12-17 18:17:33 +0100
tags: [python, frontend]
sum: "Une dos iterables o itera sobre ellos conjuntamente con <code>zip()</code>."
---

### üìå Resumen

En este art√≠culo te ense√±o a iterar dos o m√°s iterables con la funci√≥n `zip()` de Python.

#### Resultado final:

Script:

```python
spells = ["alzar a los muertos", "crear muerto viviente",
"hablar con los muertos", "falsa vida"]
levels = [5, 6, 3, 1]

spells_n_levels = list(zip(spells, levels))
print(spells_n_levels)

for spell, level in zip(spells, levels):
	print(spell, level)
```

Resultado:

```shell
[('alzar a los muertos', 5), ('crear muerto viviente', 6),
 ('hablar con los muertos', 3), ('falsa vida', 1)]

alzar a los muertos 5
crear muerto viviente 6
hablar con los muertos 3
falsa vida 1
```

---

### 0Ô∏è‚É£ Situaci√≥n

Imaginemos que tenemos dos iterables, `spells` y `levels`, que deber√≠an estar relacionados pero est√°n separados.

(Vamos a utilizar datos de la escuela de nigromancia, porque es la mejor üíÄ):

```python
spells = ["alzar a los muertos", "crear muerto viviente",
"hablar con los muertos", "falsa vida"]
levels = [5, 6, 3, 1]
```

Lo que queremos es combinar los datos, **no simplemente a√±adir una lista a la otra**. Queremos que `"alzar a los muertos"` est√© relacionado con el valor de nivel `5` de `levels`.

Podr√≠amos hacer toda una funcionalidad para conseguir este resultado... Pero `zip()` nos lo hace mucho m√°s f√°cil.

### 1Ô∏è‚É£ La funci√≥n `zip()`

La funci√≥n `zip()` de Python **devuelve un objeto iterable de tuplas**.
Cada tupla **contiene una combinaci√≥n de los elementos de cada objeto recibido**.

Ve√°moslo en acci√≥n:

```python
spells = ["alzar a los muertos", "crear muerto viviente",
"hablar con los muertos", "falsa vida"]
levels = [5, 6, 3, 1]

spells_n_levels = zip(spells, levels)
print(spells_n_levels)
```

Si ejecutamos el c√≥digo anterior, la consola nos devolver√° lo siguiente:

```shell
<zip object at 0x000001E0E7BFE780>
```

Para que nos devuelva un resultado que podamos entender, es necesario que encapsulemos la funci√≥n `zip()` dentro de la funci√≥n `list()`:

```python
spells_n_levels = list(zip(spells, levels))
```

Esto nos devolver√°:

```shell
[('alzar a los muertos', 5), ('crear muerto viviente', 6),
 ('hablar con los muertos', 3), ('falsa vida', 1)]
```

Es importante saber que la funci√≥n `zip()` crea una iterador de tuplas considerando el objeto con **menor** cantidad de elementos.

Es decir, si en lugar de 4 valores dentro de la lista `levels` hubiera s√≥lo 3, `zip()` ignorar√≠a el nombre del √∫ltimo hechizo. Cuando se acabasen los valores de `levels`, dejar√≠a de leer datos.

### 2Ô∏è‚É£ Iterando con zip

Tambi√©n podemos utilizar `zip()` para iterar dos iterables (o m√°s) de forma m√°s c√≥moda.

Siguiendo el ejemplo anterior, queremos recorrer los datos de `spells` y `levels` y mostrar por consola cada conjunto de valores relacionados.

El script quedar√≠a as√≠:

```python
spells = ["alzar a los muertos", "crear muerto viviente",
 "hablar con los muertos", "falsa vida"]
levels = [5, 6, 3, 1]

for spell, level in zip(spells, levels):
	print(spell, level)
```

Al ejecutar el c√≥digo anterior, la consola nos mostrar√≠a lo siguiente:

```shell
alzar a los muertos 5
crear muerto viviente 6
hablar con los muertos 3
falsa vida 1
```

#### Conclusi√≥n

Python ofrece muchas funcionalidades _built-in_ para problemas habituales que encontramos en el d√≠a a d√≠a.

En especial `zip()` es una funci√≥n que me parece de lo m√°s √∫til si necesitamos combinar elementos de dos o m√°s iterables.

¬°Espero que te haya sido de utilidad! üòâ
