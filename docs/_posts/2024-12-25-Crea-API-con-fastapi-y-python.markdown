---
layout: post
title: "Crea una API con FastAPI y Python"
date: 2024-12-21 18:17:33 +0100
tags: [python, apis, backend]
sum: "Crea una API simple y funcional utilizando FastAPI y Python."
---

### üìå Resumen

En este art√≠culo te ense√±o a **crear una API simple utilizando FastAPI y Python**. Forma parte de una serie de art√≠culos en los que tambi√©n a√±adiremos validaci√≥n de modelos y una base de datos con SQLite.

<details>

  <summary>
  
  <h3>üóÇÔ∏è Pre-requisitos</h3> (Click para abrir la secci√≥n)
  
  </summary>

  <hr>

  <div markdown="1">
  
  **Puedes omitir esta parte si ya tienes una carpeta para el proyecto y un entorno virtual creado**.

Para poder desarrollar una peque√±a API con FastAPI y Python, te recomiendo seguir las siguientes instrucciones:

1Ô∏è‚É£. Crea una carpeta en tu PC para alojar el proyecto

2Ô∏è‚É£. Instala Python si no lo ten√≠as instalado

3Ô∏è‚É£. Crea un entorno virtual para trabajar c√≥modamente en el proyecto

Personalmente te recomiendo `virtualenv`. Para crear un ambiente virtual con `virtualenv` primero debes instalar `virtualenv` si no lo tienes:

```shell
pip install virtualenv
```

A continuaci√≥n, **dentro de la carpeta que alojar√° el proyecto**, escribiremos la siguiente instrucci√≥n para crear nuestro entorno virtual:

```shell
virtualenv env
```

Una vez se haya creado es neceario **activar dicho entorno**. Si utilizas Windows, escribe:

```shell
env\Scripts\activate
```

Si utilizas Mac o Linux, escribe:

```shell
source env/bin/activate
```

Deber√≠as ver en la consola que est√°s dentro de tu entorno porque la ubicaci√≥n se precede con un `(env)`:

```shell
(env) C:\Users\...
```

  </div>
</details>

## üü™ Instalar FastAPI

Una vez dentro de nuestro entorno virtual, instalaremos `FastAPI` utilizando la siguiente instrucci√≥n:

```shell
pip install fastapi uvicorn
```

## üü™ Configurando la API

En la carpeta del proyecto crearemos un nuevo fichero llamado `main.py`.

1Ô∏è‚É£. Dentro de este fichero **importaremos fastAPI**:

```python
from fastapi import FastAPI
```

2Ô∏è‚É£. Creamos una **instancia de la aplicaci√≥n** para poder definirla y utilizarla:

```python
from fastapi import FastAPI

# FastAPI instance
app = FastAPI()
```

3Ô∏è‚É£. Definir **la ruta home**:

Esta ser√° la primera ruta que aparezca al visitar la API desde nuestro navegador. Es la ruta principal por defecto de `app`:

```python
from fastapi import FastAPI

# FastAPI instance
app = FastAPI()

# Root HOME
@app.get("/")
def root():
    return {"msg": "Hello!"}
```

M√°s tarde entraremos en explicaci√≥n de qu√© est√° pasando.

Por ahora, le estamos indicando a la aplicaci√≥n que la principal devuelva un simple mensaje: `Hello!`

4Ô∏è‚É£. Iniciar el servidor:

A continuaci√≥n **iniciaremos el servidor** para poder ver la API en funcionamiento.

Para iniciar el servidor, escribe la siguiente instrucci√≥n en la consola:

```shell
uvicorn main:app --reload
```

Para ver el resultado, visita la direcci√≥n en localhost donde la API te informa que ha iniciado el servicio. Te indicar√° esa direcci√≥n en la consola:

```shell
]
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
...
```

Ah√≠ deber√≠as ver tu mensaje de esta forma:

```json
{
  "msg": "Hello!"
}
```

## üü™ Explicaci√≥n

#### Importar FastAPI

Con esta l√≠nea de c√≥digo:

```python
from fastapi import FastAPI
```

Estamos indicando al programa que vamos a utilizar FastAPI. Import√°ndola tenemos acceso a todas sus funcionalidades.

#### Crear una instancia de FastAPI

Import√°ndola no es suficiente, **para poder utilizar lo que acabamos de importar necesitamos crear un recipiente en nuestro programa** donde guardar una instancia de FastApi y as√≠ poder acceder a todas sus funciones y herramientas.

```python
# Creating FastAPI instance
app = FastAPI()
```

En este caso llamamos al recipiente `app` por convenci√≥n, porque se trata de la propia aplicaci√≥n.

Quiero que entiendas bien esto.

Lo estamos llamando `app` y a continuaci√≥n, para arrancar el servicio, estamos utilizando instrucci√≥n `uvicorn main:app --reload`.

`Uvicorn` es el servidor, es decir, lo que da vida a nuestra aplicaci√≥n.
Con la instrucci√≥nn anterior le estamos indicando que **debe buscar la aplicaci√≥n (o recipiente) `app` dentro del archivo `main`** y debe arrancar con la informaci√≥n que tenga disponible ah√≠.

Si nuestra `app` en lugar de "app" se llamase "mofa_viciosa":

```python
from fastapi import FastAPI

# FastAPI instance
mofa_viciosa = FastAPI()

# Root HOME
@mofa_viciosa.get("/")
def root():
    return {"msg": "Hello!"}
```

Deber√≠amos iniciar el servidor con la instrucci√≥n:

```shell
uvicorn main:mofa_viciosa --reload
```

#### Definici√≥n de rutas

Una API se compone en esencia de endpoints o rutas, por ejemplo: `"/products"`, `"/products/product_id"`, `"/categories/fantasy"`, etc.

Estamos definiendo la primera ruta de nuestra aplicaci√≥n, la de home, de la siguiente manera:

```python
# Root HOME
@app.get("/")
def root():
    return {"msg": "Hello!"}
```

Desglosemos un poco qu√© hay aqu√≠.

Lo primero que encontramos es un **decorador**, decorando la funci√≥n `def root`.

```python
# Root HOME
@app.get("/")
```

No te asustes si los decoradores no te suenan o te suenan poco.

Los cubriremos en profundidad en otro art√≠culo, por ahora te basta con saber que **un decorador en Python no es m√°s que una funci√≥n que recibe otra funci√≥n y le a√±ade funcionalidad extra**.

En FastAPI los decoradores **se utilizan principalmente para definir los endpoints o rutas de la aplicaci√≥n**.

En esa pieza de c√≥digo estamos utilizando un decorador para definir una ruta, este caso la ruta por defecto `"/"`, con un m√©todo concreto, en este caso `get`.

As√≠, cuando un navegador visite la ruta `"/"` de nuestra aplicaci√≥n, se ejecutar√° la funci√≥n que indique este decorador, en este caso ser√° la funci√≥n `def root`.

#### La funci√≥n bajo el decorador

Como hemos comentado anteriormente, el decorador `@app.get("/")` est√° decorando la funci√≥n `def root`, por lo tanto, al visitar la ruta `"/"` de nuestro proyecto, se ejecutar√° el c√≥digo que exista dentro de la funci√≥n `def root`:

```python
# Root HOME
@app.get("/")
def root():
    return {"msg": "Hello!"}
```

En este caso, esta funci√≥n simplemente manda un `Hello!`, pero podr√≠a devolver cualquier cosa.

Por ejemplo, una lista de hechizos de bardo:

```python
# Root HOME
@app.get("/")
def root():
    bard_spells = ["Risa fant√°stica", "Disfrazarse",
    "Invisibilidad", "Voz terriblemente poderosa",]
    return bard_spells
```

El nombre de la funci√≥n, `root`, tambi√©n es una convenci√≥n por buenas pr√°cticas.
Bien podr√≠a llamarse `not_another_bard_please()` y funcionar√≠a, pero no es tan legible y claro como `root` üòâ

## Reto: crea otra ruta

Intenta crear una o dos rutas m√°s de tipo `get`, una de ellas buscando un ID concreto.

Abajo os dejo una posible soluci√≥n.

<details>

  <summary>
  
  <h3>üóÇÔ∏è Soluci√≥n</h3> (Click para abrir la secci√≥n)
  
  </summary>

  <hr>

  <div markdown="1">

```python

from fastapi import FastAPI

# Getting the APP
app = FastAPI()

# Root HOME
@app.get("/")
def root():
    return {"msg": "Hello!"}

# List of bard spells
bard_spells = ["Risa fant√°stica", "Disfrazarse",
    "Invisibilidad", "Voz terriblemente poderosa",]


@app.get("/spells")
def get_spells():
    """ Function to retrieve all bard spells """
    return bard_spells


@app.get("/spells/{spell_id}")
def get_single_spell(spell_id: int):
    """ This function retrieves a bard spell given an ID.
    Before searching the spell, we check wether the spell_id
    is greater than 0 (not negative) and less than the total
    length of the bard_spells list.
    """
    if 0 <= spell_id < len(bard_spells):
        return bard_spells[spell_id]
    else:
      # If the spell is not found...
        return "Spell not found!"

```

  </div>

</details>

## Conclusi√≥n

¬°Y s√≥lo hemos rascado un poco la superficie!

FastAPI es r√°pida (üòÜ), c√≥moda y sencilla de aprender y utilizar.

Espero que los art√≠culos sobre su funcionamiento te puedan ser de utilidad. Un abrazo.
